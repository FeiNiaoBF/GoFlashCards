// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tags.sql

package sqlc

import (
	"context"
)

const createTags = `-- name: CreateTags :one
INSERT INTO tags (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateTags(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTags, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTags = `-- name: DeleteTags :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTags(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTags, id)
	return err
}

const getAllTags = `-- name: GetAllTags :many
SELECT id, name
FROM tags
ORDER BY id
`

func (q *Queries) GetAllTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :one
SELECT id, name
FROM tags
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTags(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRow(ctx, getTags, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT id, name
FROM tags
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListTagsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTags = `-- name: UpdateTags :one
UPDATE tags
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateTagsParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTags(ctx context.Context, arg UpdateTagsParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTags, arg.ID, arg.Name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
